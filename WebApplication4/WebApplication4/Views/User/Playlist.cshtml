@using System.Collections.Generic;
@model IEnumerable<WebApplication4.Models.PlaylistModel> 


@{
    ViewBag.Title = "Search";
    Layout = "~/Views/Shared/_Layout.cshtml";

}


<!DOCTYPE html>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    @{
        var title = Model.FirstOrDefault()?.playlistname;
    }
    <title>@title</title>

</head>





<body>
    <nav class="navbar navbar-fixed-top">
        <div class="container" id="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <div style="position:relative; top: 20px;" class="logo"><a href='@Url.Action("HomePage", "User")'><img src="https://i.ibb.co/TvLjbq4/Playback-logos-transparent.png" alt="Logo" width="100" height="100" style="position:absolute;top: -35px;" /></a></div>
            </div>
           
        </div>
    </nav>
    <h1></h1>
    @for (int i = 0; i < 1; i++)
    {
        var playlist = Model.FirstOrDefault();
        if (playlist?.picture != null && playlist.picture.Length > 0)
        {

            <div style="display: flex; align-items: center; background-image: linear-gradient(to bottom, #212121, #14181C); padding-top: 20px; padding-bottom: 20px; " class="imageOnTop">
                <input style="border-radius: 50%; border: none; width: 150px; height: 150px; background-image: url('data:image/png;base64,@Convert.ToBase64String(playlist.picture)');font-size:0;background-size:cover;color:none" class="form-control-file" id="picturePro" name="picturePro" accept="image/*">
                <h1 style="margin-left: 20px;margin-bottom: 0;">@playlist.playlistname</h1>
                <h4 style="margin: 0; margin-left: -200px; margin-bottom: 40px;">Playlist</h4>
            </div>


        }
    }

    <div id="playlist">
        @foreach (var item in Model)
        {
            <div class="playlistItem">
                <img class="img-responsive center-block img-rounded" src=@item.img><p class="hidden">
                    Name:@item.trackname<br>Artist:@item.artist
                    <br>Link:https://p.scdn.co/mp3-preview/241189aa54503d502d3e06cf6996a87a27f73a81?cid=13825d1ddbcb4eb98c5265c4f453510e<br>
                    Id:@item.trackid<br>
                <p class="genres">Artists:@item.genre</p>
                <p>@item.trackname</p><p class="artist">@item.artist<br></p>
            </div>
        }
    </div>
    <div id="plots">
        <div id="myPlot" style="width:100%;max-width:500px;margin-top: 150px;margin-left: 5%;"></div>
        <div id="myPlot2" style="width:60%; max-width: 500px; margin-top: 20px; margin-left: 5%;"></div>
    </div>
    <button id="yourdata" onclick="dataShow()">Your data</button>
    <button id="yourtrack" onclick="playlistShow()">Your tracks</button>
    <script>
        var genreList = []
        var accessToken = null;
        window.onload = function getApiAccess() {

            const CLIENT_ID = '13825d1ddbcb4eb98c5265c4f453510e';
            const CLIENT_SECRET = '8e98f1bda24f4581acfeaed2b4bac525';
            var authParams = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'grant_type=client_credentials&client_id=' + CLIENT_ID + '&client_secret=' + CLIENT_SECRET
            }

            fetch('https://accounts.spotify.com/api/token', authParams)
                .then(response => response.json())
                .then(data => accessToken = data.access_token)
                .then(() => console.log(accessToken))
                .then(() => localStorage.setItem("access", accessToken))
        }

        var playlist = localStorage.getItem("playlist");

        $(document).ready(function () {
            $('.playlistItem').click(function () {
                var value = $(this).get(0).outerHTML;
                console.log(value);

                localStorage.setItem("storageName", value);
                var startIndex = value.indexOf("Id:");

                if (startIndex !== -1) {
                    startIndex += 3;
                    var endIndex = value.indexOf("<br>", startIndex);
                    var trackid = value.substring(startIndex, endIndex);
                }

                console.log(trackid);

                    $.ajax({
                        type: "post",
                        dataType: "json",
                        url: "/User/TrackId",
                        data: {
                            track: trackid,
                        },
                        success: function (data) {
                            console.log(data.message);
                            window.location.assign('@Url.Action("Song", "User")');

                        },
                    });


                });
            });

        var search = setTimeout(function () {
            var trackParams = {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + accessToken
                }
            }

            var genres = $('.genres').map(function () {
                return $(this).text().substr(8, this.length)
            }).get();

            console.log(genres);
           var promises = []
            //gets genres add opens a function
            for (var i = 0; i < genres.length; i++) {
                var promise = fetch('https://api.spotify.com/v1/artists/' + genres[i], trackParams)
                    .then(response => response.json())
                    .then(result => {
                        console.log(result.genres);
                        genreList.push(...result.genres);
                    });
                promises.push(promise)
            }

            Promise.all(promises)
                .then(() => {
                    addGenre(genreList)
            });
        }, 500);

        //adds genre and occurence to list
        function addGenre(genreList) {
            for (var i = 0; i < genreList.length; i++) {
                var genre = genreList[i];
                if (genreOccurences[genre]) {
                    genreOccurences[genre]++
                } else {
                    genreOccurences[genre] = 1
                }
            }

            var uniqueGenres = Object.keys(genreOccurences)
            var countGenres = Object.values(genreOccurences);

            console.log(uniqueGenres);
            console.log(countGenres);

            var xGenre = uniqueGenres
            var yGenre = countGenres

            var layout = { plot_bgcolor: 'rgba(0,0,0,0)', paper_bgcolor: '#14181C', title: "Most listened to Genres" };

            var data = [{ labels: xGenre, values: yGenre, type: "pie" }];

            Plotly.newPlot("myPlot2", data, layout);
        }

        var artists = $('.artist').toArray();

        var occurences = {}

        var genreOccurences = {}

        for (var i = 0; i < artists.length; i++) {
            var artist = artists[i].textContent;
            if (occurences[artist]) {
                occurences[artist]++
            } else {
                occurences[artist] = 1
            }
        }

        var uniqueArtists = Object.keys(occurences)
        var count = Object.values(occurences);

        console.log(uniqueArtists)
        console.log(count)




        var xArray = uniqueArtists
        var yArray = count

        var layout = { plot_bgcolor: 'rgba(0,0,0,0)', paper_bgcolor: '#14181C', title: "Most listened to Artists"};

        var data = [{ labels: xArray, values: yArray, type: "pie" }];

        Plotly.newPlot("myPlot", data, layout);


        function dataShow() {
            document.getElementById("plots").style.display = "grid";
            document.getElementById("playlist").style.display = "none";
        }

        function playlistShow() {
            document.getElementById("plots").style.display = "none";
            document.getElementById("playlist").style.display = "grid";
        }
    </script>

    <style>
        #plots {
            display: none;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        #playlistImageDiv {
            position: absolute;
            top: 100px;
            margin-left: 0;
        }


        #playlist {
            display: grid;
            grid-template-columns: 2fr 2fr 2fr;
            grid-gap: 10px;
            position: relative;
            top: 200px;
            left: 1.5em;
        }

        .center-block {
            margin-left: 0;
        }


        #yourdata {
            position: absolute;
            top: 314px;
            left: 50%;
            transform: translateX(-50%);
            width: 86px;
            color: black !important;
        }

        #yourtrack {
            position: absolute;
            top: 290px;
            color: black !important;
            left: 50%;
            transform: translateX(-50%);
        }

        body {
            color: white;
        }

        .hidden {
            display: none;
        }

        .genres {
            display: none;
        }

        #plots {
            color: white;
        }

      
        @@media screen and (max-width: 767px) {
            hr {
                display: none;
            }
        }

        @@media screen and (max-width: 600px) {

            #playlist {
                grid-template-columns: 8fr;
                top: 350px;
                position: absolute;
                left: 50%;
                transform: translateX(-50%);
            }
        }
    </style>
</body>
</html>
