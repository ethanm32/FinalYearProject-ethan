"use strict";

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.replace");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProjectWorkspace = exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * Represents the project that the extension is running on and it's state
 */
var ProjectWorkspace = /*#__PURE__*/function () {
  _createClass(ProjectWorkspace, [{
    key: "pathToJest",

    /**
     * The path to the root of the project's workspace
     *
     * @type {string}
     */

    /**
     * The command to execute Jest on the command line, this is normally a file path like
     * `node_modules/.bin/jest` but you should not make the assumption that it is always a direct
     * file path, as in a create-react app it would look like `npm test --`.
     *
     * This means when launching a process, you will need to split on the first
     * space, and then move any other args into the args of the process.
     *
     * @type {string}
     */

    /**
     * @deprecated please use `jestCommandLine` instead.
     *
     * @type {string?}
     */
    get: function get() {
      // eslint-disable-next-line no-console
      console.warn('Use of ProjectWorkspace.pathToJest is deprecated.  Please use jestCommandLine instead.');
      return this.jestCommandLine;
    },
    set: function set(commandLine) {
      // eslint-disable-next-line no-console
      console.warn('Use of ProjectWorkspace.pathToJest is deprecated.  Please use jestCommandLine instead.');
      this.jestCommandLine = commandLine;
    }
    /**
     * Path to a local Jest config file.
     *
     * @type {string}
     */

  }]);

  function ProjectWorkspace(rootPath, jestCommandLine, pathToConfig, localJestMajorVersion, outputFileSuffix, collectCoverage, debug) {
    _classCallCheck(this, ProjectWorkspace);

    this.rootPath = rootPath;
    this.jestCommandLine = jestCommandLine;
    this.pathToConfig = pathToConfig;
    this.localJestMajorVersion = localJestMajorVersion;
    this.outputFileSuffix = outputFileSuffix ? outputFileSuffix.replace(/[^a-z0-9]/gi, '_').toLowerCase() : undefined;
    this.collectCoverage = collectCoverage;
    this.debug = debug;
  }

  return ProjectWorkspace;
}();
/**
 * A factory to create a ProjectWorkspace instance from a ProjectWorkspaceConfig object.
 */


exports["default"] = ProjectWorkspace;

var createProjectWorkspace = function createProjectWorkspace(config) {
  // Note for pathToConfig we are forcing the TS compiler to accept undefined for ProjectWorkspace.pathToConfig.
  // This property should be allowed to be optional, since Jest will work fine if no config file is provided.  It
  // will just use defaults.
  return new ProjectWorkspace(config.rootPath, config.jestCommandLine, config.pathToConfig, config.localJestMajorVersion, config.outputFileSuffix, config.collectCoverage, config.debug);
};

exports.createProjectWorkspace = createProjectWorkspace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9qZWN0X3dvcmtzcGFjZS50cyJdLCJuYW1lcyI6WyJQcm9qZWN0V29ya3NwYWNlIiwiY29uc29sZSIsIndhcm4iLCJqZXN0Q29tbWFuZExpbmUiLCJjb21tYW5kTGluZSIsInJvb3RQYXRoIiwicGF0aFRvQ29uZmlnIiwibG9jYWxKZXN0TWFqb3JWZXJzaW9uIiwib3V0cHV0RmlsZVN1ZmZpeCIsImNvbGxlY3RDb3ZlcmFnZSIsImRlYnVnIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwidW5kZWZpbmVkIiwiY3JlYXRlUHJvamVjdFdvcmtzcGFjZSIsImNvbmZpZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7OztBQWtCQTs7O0lBR3FCQSxnQjs7OztBQUNuQjs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7O0FBWUE7Ozs7O3dCQUtpQjtBQUNmO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLHdGQUFiO0FBQ0EsYUFBTyxLQUFLQyxlQUFaO0FBQ0QsSztzQkFFY0MsVyxFQUFxQjtBQUNsQztBQUNBSCxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSx3RkFBYjtBQUNBLFdBQUtDLGVBQUwsR0FBdUJDLFdBQXZCO0FBQ0Q7QUFFRDs7Ozs7Ozs7QUFxQ0EsNEJBQ0VDLFFBREYsRUFFRUYsZUFGRixFQUdFRyxZQUhGLEVBSUVDLHFCQUpGLEVBS0VDLGdCQUxGLEVBTUVDLGVBTkYsRUFPRUMsS0FQRixFQVFFO0FBQUE7O0FBQ0EsU0FBS0wsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLRixlQUFMLEdBQXVCQSxlQUF2QjtBQUNBLFNBQUtHLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsU0FBS0MscUJBQUwsR0FBNkJBLHFCQUE3QjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCQSxnQkFBZ0IsR0FBR0EsZ0JBQWdCLENBQUNHLE9BQWpCLENBQXlCLGFBQXpCLEVBQXdDLEdBQXhDLEVBQTZDQyxXQUE3QyxFQUFILEdBQWdFQyxTQUF4RztBQUNBLFNBQUtKLGVBQUwsR0FBdUJBLGVBQXZCO0FBQ0EsU0FBS0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0Q7Ozs7QUFHSDs7Ozs7OztBQUdPLElBQU1JLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBeUIsQ0FBQ0MsTUFBRCxFQUFzRDtBQUMxRjtBQUNBO0FBQ0E7QUFDQSxTQUFPLElBQUlmLGdCQUFKLENBQ0xlLE1BQU0sQ0FBQ1YsUUFERixFQUVMVSxNQUFNLENBQUNaLGVBRkYsRUFHSlksTUFBTSxDQUFDVCxZQUhILEVBSUxTLE1BQU0sQ0FBQ1IscUJBSkYsRUFLTFEsTUFBTSxDQUFDUCxnQkFMRixFQU1MTyxNQUFNLENBQUNOLGVBTkYsRUFPTE0sTUFBTSxDQUFDTCxLQVBGLENBQVA7QUFTRCxDQWJNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBQcm9qZWN0V29ya3NwYWNlQ29uZmlnIHtcbiAgamVzdENvbW1hbmRMaW5lOiBzdHJpbmc7XG4gIHBhdGhUb0NvbmZpZz86IHN0cmluZztcbiAgcm9vdFBhdGg6IHN0cmluZztcbiAgbG9jYWxKZXN0TWFqb3JWZXJzaW9uOiBudW1iZXI7XG4gIG91dHB1dEZpbGVTdWZmaXg/OiBzdHJpbmc7XG4gIGNvbGxlY3RDb3ZlcmFnZT86IGJvb2xlYW47XG4gIGRlYnVnPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBwcm9qZWN0IHRoYXQgdGhlIGV4dGVuc2lvbiBpcyBydW5uaW5nIG9uIGFuZCBpdCdzIHN0YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3RXb3Jrc3BhY2Uge1xuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QncyB3b3Jrc3BhY2VcbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHJvb3RQYXRoOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb21tYW5kIHRvIGV4ZWN1dGUgSmVzdCBvbiB0aGUgY29tbWFuZCBsaW5lLCB0aGlzIGlzIG5vcm1hbGx5IGEgZmlsZSBwYXRoIGxpa2VcbiAgICogYG5vZGVfbW9kdWxlcy8uYmluL2plc3RgIGJ1dCB5b3Ugc2hvdWxkIG5vdCBtYWtlIHRoZSBhc3N1bXB0aW9uIHRoYXQgaXQgaXMgYWx3YXlzIGEgZGlyZWN0XG4gICAqIGZpbGUgcGF0aCwgYXMgaW4gYSBjcmVhdGUtcmVhY3QgYXBwIGl0IHdvdWxkIGxvb2sgbGlrZSBgbnBtIHRlc3QgLS1gLlxuICAgKlxuICAgKiBUaGlzIG1lYW5zIHdoZW4gbGF1bmNoaW5nIGEgcHJvY2VzcywgeW91IHdpbGwgbmVlZCB0byBzcGxpdCBvbiB0aGUgZmlyc3RcbiAgICogc3BhY2UsIGFuZCB0aGVuIG1vdmUgYW55IG90aGVyIGFyZ3MgaW50byB0aGUgYXJncyBvZiB0aGUgcHJvY2Vzcy5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGplc3RDb21tYW5kTGluZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBwbGVhc2UgdXNlIGBqZXN0Q29tbWFuZExpbmVgIGluc3RlYWQuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmc/fVxuICAgKi9cbiAgZ2V0IHBhdGhUb0plc3QoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oJ1VzZSBvZiBQcm9qZWN0V29ya3NwYWNlLnBhdGhUb0plc3QgaXMgZGVwcmVjYXRlZC4gIFBsZWFzZSB1c2UgamVzdENvbW1hbmRMaW5lIGluc3RlYWQuJyk7XG4gICAgcmV0dXJuIHRoaXMuamVzdENvbW1hbmRMaW5lO1xuICB9XG5cbiAgc2V0IHBhdGhUb0plc3QoY29tbWFuZExpbmU6IHN0cmluZykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKCdVc2Ugb2YgUHJvamVjdFdvcmtzcGFjZS5wYXRoVG9KZXN0IGlzIGRlcHJlY2F0ZWQuICBQbGVhc2UgdXNlIGplc3RDb21tYW5kTGluZSBpbnN0ZWFkLicpO1xuICAgIHRoaXMuamVzdENvbW1hbmRMaW5lID0gY29tbWFuZExpbmU7XG4gIH1cblxuICAvKipcbiAgICogUGF0aCB0byBhIGxvY2FsIEplc3QgY29uZmlnIGZpbGUuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBwYXRoVG9Db25maWc6IHN0cmluZztcblxuICAvKipcbiAgICogbG9jYWwgSmVzdCBtYWpvciByZWxlYXNlIHZlcnNpb24sIGFzIHRoZSBydW5uZXIgY291bGQgcnVuIGFnYWluc3RcbiAgICogYW55IHZlcnNpb24gb2YgSmVzdC5cbiAgICpcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGxvY2FsSmVzdE1ham9yVmVyc2lvbjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRlc3QgY292ZXJhZ2Ugc2hvdWxkIGJlIChhdXRvbWF0aWNhbGx5KSBjb2xsZWN0ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgY29sbGVjdENvdmVyYWdlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogaWYgdG8gb3V0cHV0IG1vcmUgaW5mb3JtYXRpb24gZm9yIGRlYnVnZ2luZyBwdXJwb3NlLiBEZWZhdWx0IGlzIGZhbHNlLlxuICAgKlxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGRlYnVnPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogc3VmZml4IHN0cmluZyB1c2VkIGFzIHBhcnQgb2YgdGhlIG91dHB1dCBmaWxlIHBhdGgsIHRoaXMgaXMgdG8gc3VwcG9ydCBjb25jdXJyZW50IFJ1bm5lcnMuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBQcm9qZWN0V29ya3NwYWNlXG4gICAqL1xuICBvdXRwdXRGaWxlU3VmZml4Pzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJvb3RQYXRoOiBzdHJpbmcsXG4gICAgamVzdENvbW1hbmRMaW5lOiBzdHJpbmcsXG4gICAgcGF0aFRvQ29uZmlnOiBzdHJpbmcsXG4gICAgbG9jYWxKZXN0TWFqb3JWZXJzaW9uOiBudW1iZXIsXG4gICAgb3V0cHV0RmlsZVN1ZmZpeD86IHN0cmluZyxcbiAgICBjb2xsZWN0Q292ZXJhZ2U/OiBib29sZWFuLFxuICAgIGRlYnVnPzogYm9vbGVhblxuICApIHtcbiAgICB0aGlzLnJvb3RQYXRoID0gcm9vdFBhdGg7XG4gICAgdGhpcy5qZXN0Q29tbWFuZExpbmUgPSBqZXN0Q29tbWFuZExpbmU7XG4gICAgdGhpcy5wYXRoVG9Db25maWcgPSBwYXRoVG9Db25maWc7XG4gICAgdGhpcy5sb2NhbEplc3RNYWpvclZlcnNpb24gPSBsb2NhbEplc3RNYWpvclZlcnNpb247XG4gICAgdGhpcy5vdXRwdXRGaWxlU3VmZml4ID0gb3V0cHV0RmlsZVN1ZmZpeCA/IG91dHB1dEZpbGVTdWZmaXgucmVwbGFjZSgvW15hLXowLTldL2dpLCAnXycpLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb2xsZWN0Q292ZXJhZ2UgPSBjb2xsZWN0Q292ZXJhZ2U7XG4gICAgdGhpcy5kZWJ1ZyA9IGRlYnVnO1xuICB9XG59XG5cbi8qKlxuICogQSBmYWN0b3J5IHRvIGNyZWF0ZSBhIFByb2plY3RXb3Jrc3BhY2UgaW5zdGFuY2UgZnJvbSBhIFByb2plY3RXb3Jrc3BhY2VDb25maWcgb2JqZWN0LlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlUHJvamVjdFdvcmtzcGFjZSA9IChjb25maWc6IFByb2plY3RXb3Jrc3BhY2VDb25maWcpOiBQcm9qZWN0V29ya3NwYWNlID0+IHtcbiAgLy8gTm90ZSBmb3IgcGF0aFRvQ29uZmlnIHdlIGFyZSBmb3JjaW5nIHRoZSBUUyBjb21waWxlciB0byBhY2NlcHQgdW5kZWZpbmVkIGZvciBQcm9qZWN0V29ya3NwYWNlLnBhdGhUb0NvbmZpZy5cbiAgLy8gVGhpcyBwcm9wZXJ0eSBzaG91bGQgYmUgYWxsb3dlZCB0byBiZSBvcHRpb25hbCwgc2luY2UgSmVzdCB3aWxsIHdvcmsgZmluZSBpZiBubyBjb25maWcgZmlsZSBpcyBwcm92aWRlZC4gIEl0XG4gIC8vIHdpbGwganVzdCB1c2UgZGVmYXVsdHMuXG4gIHJldHVybiBuZXcgUHJvamVjdFdvcmtzcGFjZShcbiAgICBjb25maWcucm9vdFBhdGgsXG4gICAgY29uZmlnLmplc3RDb21tYW5kTGluZSxcbiAgICAoY29uZmlnLnBhdGhUb0NvbmZpZyBhcyB1bmtub3duKSBhcyBzdHJpbmcsXG4gICAgY29uZmlnLmxvY2FsSmVzdE1ham9yVmVyc2lvbixcbiAgICBjb25maWcub3V0cHV0RmlsZVN1ZmZpeCxcbiAgICBjb25maWcuY29sbGVjdENvdmVyYWdlLFxuICAgIGNvbmZpZy5kZWJ1Z1xuICApO1xufTtcbiJdfQ==