"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProcess = void 0;

var _child_process = require("child_process");

var _project_workspace = _interopRequireDefault(require("./project_workspace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Spawns and returns a Jest process with specific args
 *
 * @param {string[]} args
 * @returns {ChildProcess}
 */
// eslint-disable-next-line import/prefer-default-export
var createProcess = function createProcess(workspace, args) {
  var runtimeExecutable = [workspace.jestCommandLine].concat(_toConsumableArray(args)); // If a path to configuration file was defined, push it to runtimeArgs

  if (workspace.pathToConfig) {
    runtimeExecutable.push('--config');
    runtimeExecutable.push(workspace.pathToConfig);
  } // To use our own commands in create-react, we need to tell the command that
  // we're in a CI environment, or it will always append --watch


  var _process = process,
      env = _process.env;
  env.CI = 'true';
  var spawnOptions = {
    cwd: workspace.rootPath,
    env: env,
    shell: true,
    // for non-windows: run in detached mode so the process will be the group leader and any subsequent process spawned
    // within can be later killed as a group to prevent orphan processes.
    // see https://nodejs.org/api/child_process.html#child_process_options_detached
    detached: process.platform !== 'win32'
  };

  if (workspace.debug) {
    // eslint-disable-next-line no-console
    console.log("spawning process with command=".concat(runtimeExecutable.join(' ')));
  }

  return (0, _child_process.spawn)(runtimeExecutable.join(' '), [], spawnOptions);
};

exports.createProcess = createProcess;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9jZXNzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVByb2Nlc3MiLCJ3b3Jrc3BhY2UiLCJhcmdzIiwicnVudGltZUV4ZWN1dGFibGUiLCJqZXN0Q29tbWFuZExpbmUiLCJwYXRoVG9Db25maWciLCJwdXNoIiwicHJvY2VzcyIsImVudiIsIkNJIiwic3Bhd25PcHRpb25zIiwiY3dkIiwicm9vdFBhdGgiLCJzaGVsbCIsImRldGFjaGVkIiwicGxhdGZvcm0iLCJkZWJ1ZyIsImNvbnNvbGUiLCJsb2ciLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7Ozs7O0FBTUE7QUFDTyxJQUFNQSxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQUNDLFNBQUQsRUFBOEJDLElBQTlCLEVBQW9FO0FBQy9GLE1BQU1DLGlCQUFpQixJQUFJRixTQUFTLENBQUNHLGVBQWQsNEJBQWtDRixJQUFsQyxFQUF2QixDQUQrRixDQUcvRjs7QUFDQSxNQUFJRCxTQUFTLENBQUNJLFlBQWQsRUFBNEI7QUFDMUJGLElBQUFBLGlCQUFpQixDQUFDRyxJQUFsQixDQUF1QixVQUF2QjtBQUNBSCxJQUFBQSxpQkFBaUIsQ0FBQ0csSUFBbEIsQ0FBdUJMLFNBQVMsQ0FBQ0ksWUFBakM7QUFDRCxHQVA4RixDQVMvRjtBQUNBOzs7QUFWK0YsaUJBV2pGRSxPQVhpRjtBQUFBLE1BV3hGQyxHQVh3RixZQVd4RkEsR0FYd0Y7QUFZL0ZBLEVBQUFBLEdBQUcsQ0FBQ0MsRUFBSixHQUFTLE1BQVQ7QUFFQSxNQUFNQyxZQUFZLEdBQUc7QUFDbkJDLElBQUFBLEdBQUcsRUFBRVYsU0FBUyxDQUFDVyxRQURJO0FBRW5CSixJQUFBQSxHQUFHLEVBQUhBLEdBRm1CO0FBR25CSyxJQUFBQSxLQUFLLEVBQUUsSUFIWTtBQUluQjtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsUUFBUSxFQUFFUCxPQUFPLENBQUNRLFFBQVIsS0FBcUI7QUFQWixHQUFyQjs7QUFVQSxNQUFJZCxTQUFTLENBQUNlLEtBQWQsRUFBcUI7QUFDbkI7QUFDQUMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLHlDQUE2Q2YsaUJBQWlCLENBQUNnQixJQUFsQixDQUF1QixHQUF2QixDQUE3QztBQUNEOztBQUVELFNBQU8sMEJBQU1oQixpQkFBaUIsQ0FBQ2dCLElBQWxCLENBQXVCLEdBQXZCLENBQU4sRUFBbUMsRUFBbkMsRUFBdUNULFlBQXZDLENBQVA7QUFDRCxDQTlCTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQge0NoaWxkUHJvY2Vzcywgc3Bhd259IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IFByb2plY3RXb3Jrc3BhY2UgZnJvbSAnLi9wcm9qZWN0X3dvcmtzcGFjZSc7XG5cbi8qKlxuICogU3Bhd25zIGFuZCByZXR1cm5zIGEgSmVzdCBwcm9jZXNzIHdpdGggc3BlY2lmaWMgYXJnc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nW119IGFyZ3NcbiAqIEByZXR1cm5zIHtDaGlsZFByb2Nlc3N9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0XG5leHBvcnQgY29uc3QgY3JlYXRlUHJvY2VzcyA9ICh3b3Jrc3BhY2U6IFByb2plY3RXb3Jrc3BhY2UsIGFyZ3M6IEFycmF5PHN0cmluZz4pOiBDaGlsZFByb2Nlc3MgPT4ge1xuICBjb25zdCBydW50aW1lRXhlY3V0YWJsZSA9IFt3b3Jrc3BhY2UuamVzdENvbW1hbmRMaW5lLCAuLi5hcmdzXTtcblxuICAvLyBJZiBhIHBhdGggdG8gY29uZmlndXJhdGlvbiBmaWxlIHdhcyBkZWZpbmVkLCBwdXNoIGl0IHRvIHJ1bnRpbWVBcmdzXG4gIGlmICh3b3Jrc3BhY2UucGF0aFRvQ29uZmlnKSB7XG4gICAgcnVudGltZUV4ZWN1dGFibGUucHVzaCgnLS1jb25maWcnKTtcbiAgICBydW50aW1lRXhlY3V0YWJsZS5wdXNoKHdvcmtzcGFjZS5wYXRoVG9Db25maWcpO1xuICB9XG5cbiAgLy8gVG8gdXNlIG91ciBvd24gY29tbWFuZHMgaW4gY3JlYXRlLXJlYWN0LCB3ZSBuZWVkIHRvIHRlbGwgdGhlIGNvbW1hbmQgdGhhdFxuICAvLyB3ZSdyZSBpbiBhIENJIGVudmlyb25tZW50LCBvciBpdCB3aWxsIGFsd2F5cyBhcHBlbmQgLS13YXRjaFxuICBjb25zdCB7ZW52fSA9IHByb2Nlc3M7XG4gIGVudi5DSSA9ICd0cnVlJztcblxuICBjb25zdCBzcGF3bk9wdGlvbnMgPSB7XG4gICAgY3dkOiB3b3Jrc3BhY2Uucm9vdFBhdGgsXG4gICAgZW52LFxuICAgIHNoZWxsOiB0cnVlLFxuICAgIC8vIGZvciBub24td2luZG93czogcnVuIGluIGRldGFjaGVkIG1vZGUgc28gdGhlIHByb2Nlc3Mgd2lsbCBiZSB0aGUgZ3JvdXAgbGVhZGVyIGFuZCBhbnkgc3Vic2VxdWVudCBwcm9jZXNzIHNwYXduZWRcbiAgICAvLyB3aXRoaW4gY2FuIGJlIGxhdGVyIGtpbGxlZCBhcyBhIGdyb3VwIHRvIHByZXZlbnQgb3JwaGFuIHByb2Nlc3Nlcy5cbiAgICAvLyBzZWUgaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9jaGlsZF9wcm9jZXNzLmh0bWwjY2hpbGRfcHJvY2Vzc19vcHRpb25zX2RldGFjaGVkXG4gICAgZGV0YWNoZWQ6IHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicsXG4gIH07XG5cbiAgaWYgKHdvcmtzcGFjZS5kZWJ1Zykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coYHNwYXduaW5nIHByb2Nlc3Mgd2l0aCBjb21tYW5kPSR7cnVudGltZUV4ZWN1dGFibGUuam9pbignICcpfWApO1xuICB9XG5cbiAgcmV0dXJuIHNwYXduKHJ1bnRpbWVFeGVjdXRhYmxlLmpvaW4oJyAnKSwgW10sIHNwYXduT3B0aW9ucyk7XG59O1xuIl19